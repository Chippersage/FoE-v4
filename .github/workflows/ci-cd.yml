name: CI/CD Pipeline

on:
  push:
    branches: [ master ]  # Adjust this to your main branch name

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    # Backend build
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'  # Adjust according to your Spring Boot version
    
    # Create application.properties file with GitHub secrets
    - name: Create application.properties
      run: |
        cd FlowofEnglish_Backend/src/main/resources
        cat > application.properties << EOF
        spring.application.name=FlowofEnglish_Backend
        spring.datasource.url=${{ secrets.DB_URL }}
        spring.datasource.username=${{ secrets.DB_USERNAME }}
        spring.datasource.password=${{ secrets.DB_PASSWORD }}
        spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
        spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
        spring.jpa.hibernate.ddl-auto=update
        spring.jpa.show-sql=true
        
        server.port=8080
        
        jwt.secret.key=${{ secrets.JWT_SECRET }}
        spring.jpa.open-in-view=false
        server.servlet.session.timeout=30m
        
        spring.mail.username=${{ secrets.EMAIL_USERNAME }}
        spring.mail.properties.mail.smtp.starttls.required=true
        spring.mail.host=smtp.gmail.com
        spring.mail.port=587
        spring.mail.password=${{ secrets.EMAIL_PASSWORD }}
        spring.mail.properties.mail.smtp.auth=true
        spring.mail.properties.mail.transport.protocol=smtp
        spring.mail.properties.mail.smtp.starttls.enable=true
        spring.servlet.multipart.max-file-size=30MB
        spring.servlet.multipart.max-request-size=30MB
        
        razorpay.keyId=${{ secrets.RAZORPAY_KEY_ID }}
        razorpay.keySecret=${{ secrets.RAZORPAY_KEY_SECRET }}
        razorpay.webhookSecret: ${{ secrets.RAZORPAY_WEBHOOK_SECRET }}
        
        aws.accessKeyId=${{ secrets.AWS_ACCESS_KEY }}
        aws.secretKey=${{ secrets.AWS_SECRET_KEY }}
        aws.region=${{ secrets.AWS_REGION }}
        aws.s3.bucket=${{ secrets.AWS_S3_BUCKET }}

        logging.level.root=INFO
        logging.level.org.springframework=INFO
        logging.level.com.FlowofEnglish=DEBUG
        logging.file.name=logs/app.log

        
        management.endpoints.web.exposure.include=*
        management.metrics.enable.all=true
        EOF
        
    - name: Build backend with Maven
      run: |
        cd FlowofEnglish_Backend  # Update this to your backend directory name
        chmod +x ./mvnw
        ./mvnw clean package -DskipTests
        
    # Admin frontend build
    - name: Set up Node.js for admin frontend
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Build admin frontend
      run: |
        cd FlowofEnglish_Frontend/FoE/packages/admin  # Update this to your admin frontend directory
        npm install --legacy-peer-deps
        ESLINT_NO_DEV_ERRORS=true npm run build
      env:
        CI: false  # This is an alternative approach that tells React not to treat warnings as errors
        REACT_APP_API_URL: ${{ secrets.API_BASE_URL }}
        
    # User frontend build
    - name: Set up Node.js for user frontend
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Build user frontend
      run: |
        cd FlowofEnglish_UserFrontend  # Update this to your user frontend directory
        npm install
        npm run build
      env:
        VITE_API_BASE_URL: ${{ secrets.API_BASE_URL }}
        
    # Deploy to EC2
    - name: Deploy to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "FlowofEnglish_Backend/target/FlowofEnglish_Backend-0.0.1-SNAPSHOT.jar,FlowofEnglish_Frontend/FoE/packages/admin/build/,FlowofEnglish_UserFrontend/dist/"
        target: "/tmp/deployment"
        
    # Restart services
    - name: Move files with backup and restart services
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Generate timestamp
          TIMESTAMP=$(date +"%Y-%m-%d-%H-%M-%S")
          
          # Backup existing html and build directories
          if [ -d /usr/share/nginx/html ]; then
            sudo cp -r /usr/share/nginx/html "/usr/share/nginx/html_backup_$TIMESTAMP"
          fi

          if [ -d /usr/share/nginx/build ]; then
            sudo cp -r /usr/share/nginx/build "/usr/share/nginx/build_backup_$TIMESTAMP"
          fi

          # Move files to their respective locations
          sudo rm -rf /usr/share/nginx/html/*
          sudo cp -r /tmp/deployment/FlowofEnglish_UserFrontend/dist/* /usr/share/nginx/html/
          
          sudo rm -rf /usr/share/nginx/build/*
          sudo cp -r /tmp/deployment/FlowofEnglish_Frontend/FoE/packages/admin/build/* /usr/share/nginx/build/
          
          sudo cp /tmp/deployment/FlowofEnglish_Backend/target/FlowofEnglish_Backend-0.0.1-SNAPSHOT.jar ~/FlowofEnglish_Backend-0.0.1-SNAPSHOT.jar
          
          # Restart PM2 processes
          cd ~
          pm2 restart ecosystem.config.json
          
          # Clean up temporary files
          sudo rm -rf /tmp/deployment
          
          # Reload NGINX if needed
          sudo systemctl reload nginx

          # ðŸ§¹ Cleanup old backups
          sudo ls -1t /usr/share/nginx/ | grep -E 'build_backup_|html_backup_' | tail -n +3 | while read backup; do
            echo "Deleting old backup: $backup"
            sudo rm -rf "/usr/share/nginx/$backup"
          done